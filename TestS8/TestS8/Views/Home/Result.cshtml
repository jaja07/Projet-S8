@{
    ViewData["Title"] = "Accueil";
}
@model IEnumerable<TestS8.Models.Modele>
@{
    float ExtractNumber(string result)
    {
        if (!string.IsNullOrEmpty(result))
        {

            dynamic jsonResult = Newtonsoft.Json.JsonConvert.DeserializeObject(result);
            if (jsonResult != null && jsonResult.accuracy != null)
            {
                //  accuracy
                return (float)jsonResult.accuracy;
            }
        }
        return 0;
    }
    string ExtractTags(string result)
    {
        if (!string.IsNullOrEmpty(result))
        {
            dynamic jsonResult = Newtonsoft.Json.JsonConvert.DeserializeObject(result);
            if (jsonResult != null && jsonResult.path != null)
            {
                //  accuracy
                return (string)jsonResult.tags;
            }
        }
        return null;
    }
    string analytique = ExtractNumber(ViewBag.Analytique).ToString().Replace(",", ".");
    string knn = ExtractNumber(ViewBag.KNN).ToString().Replace(",", ".");
    string svm = ExtractNumber(ViewBag.SVM).ToString().Replace(",", ".");
    string randomforest = ExtractNumber(ViewBag.Randomforest).ToString().Replace(",", "."); 

    string rf_tags = ExtractTags(ViewBag.Randomforest);
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <style>
        canvas {
            width: 400px; /* Définir une largeur fixe */
            height: 300px; /* Définir une hauteur fixe */
        }
        body {
            font-family: Arial, sans-serif;
            background-image: url('https://cdn.pixabay.com/photo/2024/01/29/22/47/ai-generated-8540915_1280.jpg');
            background-size: cover;
            background-position: center;
            padding: 20px; /* Espacement autour du contenu */
            color: #FFFFFF; /* Couleur du texte blanc */
        }

        .welcome-title {
            font-size: 2.5em; /* Taille du titre */
            text-align: center; /* Centrage horizontal */
            margin-bottom: 30px; /* Espacement en dessous */
            text-transform: uppercase; /* Conversion en majuscules */
            letter-spacing: 2px; /* Espacement entre les lettres */
        }

        .conteneur-bouton {
            text-align: center; /* Centrage horizontal du bouton */
            margin-top: 50px;
        }

        .bouton-envoyer {
            background-color: #4CAF50; /* Couleur de fond verte */
            color: white; /* Couleur du texte blanc */
            padding: 10px 20px; /* Espacement autour du texte */
            border: none; /* Pas de bordure */
            border-radius: 5px; /* Coins arrondis */
            cursor: pointer; /* Curseur pointer */
            transition: background-color 0.3s ease; /* Transition fluide */
        }

            .bouton-envoyer:hover {
                background-color: #45a049; /* Couleur de fond plus foncée au survol */
            }

        .chart{
            background: white;
            height:100px;
            width:100px;
        }
        .table{
            background: white;
        }
        .matrice{

        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
</head>
<body>
    <div id="result">
        <h1 class="welcome-title">Résultat de simulation</h1>
        <table class="table">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.Nom)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Accuracy)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Accuracy_cross)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Duree_simul)
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Nom)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Accuracy)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Accuracy_cross)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Duree_simul)
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <div>
            <canvas id="myChart" class="chart"></canvas>
        </div>

        <div class="Matrice">
            @if (ViewBag.KNN != null)
            {
                <h2 class="welcome-title">Matrices de confusions: KNN</h2>
                <div id="knn_cm" class="matrice">
                    <img src="/images/knn_cm.png" />
                </div>
            }
            @if (ViewBag.Randomforest != null)
            {
                <h2 class="welcome-title">Matrices de confusions: Random Forest</h2>
                <div class="matrice">
                    <img id="rf_cm" src="/images/rf_cm.png" />
                </div>
                <pre>@Html.Raw(ViewBag.Randomforest)</pre>
            }
            @if (ViewBag.SVM != null)
            {
                <h2 class="welcome-title">Matrices de confusions: SVM</h2>
                <div class="matrice">
                    <img id="svm_cm" src="/images/svm_cm.png" />
                </div>
            }
        </div>
    </div>


    <div class="conteneur-bouton">
        <button id="generatePDFButton" class="bouton-envoyer">Download PDF</button>
    </div>


    <script>
        function updateChart(selectedOptions) {
            const ctx = document.getElementById('myChart');
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: ['Analytique','Random Forest', 'SVM', 'KNN'],
                    datasets: [{
                        label: '# of Votes',
                        data: selectedOptions,
                        backgroundColor: [ // Couleur de fond des barres
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(54, 162, 235, 0.2)',
                            'rgba(255, 206, 86, 0.2)',
                            'rgba(75, 192, 192, 0.2)'
                        ],
                        borderColor: [ // Couleur de bordure des barres
                            'rgba(255, 99, 132, 1)',
                            'rgba(54, 162, 235, 1)',
                            'rgba(255, 206, 86, 1)',
                            'rgba(75, 192, 192, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }
        updateChart([@analytique, @randomforest, @svm, @knn]);
    </script>

    <script type="text/javascript">
        window.addEventListener('beforeunload', function (event) {
            // Envoyer une requête AJAX pour notifier la fermeture de la vue
            navigator.sendBeacon('/Home/OnViewClose');
        });
    </script>

    <script>
        function generatePDF() {
            // Convertir le canvas en image
            var canvas = document.getElementById('myChart');
            var imgData = canvas.toDataURL('image/png');

            // Précharger les images des boxplots
            var cmImages = {
                rf: new Image(),
                svm: new Image(),
                knn: new Image()
            };
            if (@randomforest) {
                cmImages.rf.src = "/images/rf_cm.png";
            }
            if (@svm) {
                cmImages.svm.src = "/images/svm_cm.png";
            }
            if (@knn) {
                cmImages.knn.src = "/images/knn_cm.png";
            }   
            
            // Générer le PDF avec jsPDF
            const { jsPDF } = window.jspdf;
            var doc = new jsPDF();

            // Ajouter le titre en gras, souligné et centré
            doc.setFont('Helvetica', 'bold');
            doc.setFontSize(16);
            doc.text('Résultats de la simulation', doc.internal.pageSize.getWidth() / 2, 10, { align: 'center' });
            doc.setFont('Helvetica', 'normal'); // Réinitialiser la police à normale
            doc.setFontSize(12); // Réinitialiser la taille de la police
            var yOffset = 20;
            yOffset += 10;

            // Ajouter le graphique
            if (imgData) {
                doc.addImage(imgData, 'PNG', 10, 20, 190, 100); // Augmenter les dimensions
            }
            // Ajouter les matrices de confusion
            if (cmImages.svm.src) {
                doc.addPage(); // Ajouter une nouvelle page
                doc.addImage(cmImages.svm.src, 'PNG', 10, 20, 190, 100); // Augmenter les dimensions
            } 
           

            if (cmImages.knn.src) {
                doc.addPage(); // Ajouter une nouvelle page
                doc.addImage(cmImages.knn.src, 'PNG', 10, 20, 190, 100); // Augmenter les dimensions
            }
 

            if (cmImages.rf.src) {
                doc.addPage(); // Ajouter une nouvelle page
                doc.addImage(cmImages.rf.src, 'PNG', 10, 20, 190, 100); // Augmenter les dimensions
            }


            // Télécharger le PDF
            doc.save('SimulationResults.pdf');
        }
        document.getElementById('generatePDFButton').addEventListener('click', generatePDF);
    </script>
</body>
</html>
